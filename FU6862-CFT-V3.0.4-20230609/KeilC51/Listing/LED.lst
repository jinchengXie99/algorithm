C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\Output\LED.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\User\Source\Application\LED.c LARGE OMF2 WARNINGLEVEL(0) OPTIMIZE(9,S
                    -PEED) BROWSE INCDIR(..\User\Include;..\FU68xx_Hardware_Driver\Include) DEBUG PRINT(.\Listing\LED.lst) TABS(2) OBJECT(.\O
                    -utput\LED.obj)

line level    source

   1          /*  -------------------------- (C) COPYRIGHT 2022 Fortiortech ShenZhen ---------------------------*/
   2          /**
   3           * @copyright (C) COPYRIGHT 2022 Fortiortech Shenzhen
   4           * @file      LED.c
   5           * @author    Fortiortech  Appliction Team
   6           * @since     Create:2022-07-14
   7           * @date      Last modify:2022-07-18
   8           * @note      Last modify author is Leo.li
   9           * @brief      
  10           */
  11          
  12          /* Includes -------------------------------------------------------------------------------------*/
  13          #include <FU68xx_2.h>
  14          #include <Myproject.h>
  15          
  16          /* Private variables ----------------------------------------------------------------------------*/
  17          LEDCtl_TypeDef LEDCtl;
  18          MCLedDisplay     xdata   mcLedDisplay;
  19          
  20          ////Ê∏©Â∫¶‰ªé21¬∞Âà∞140¬∞             21       22     23     24      25     26     27    28      29     30
  21          //uint16 Temperature_Voltage[]={22948 , 22641, 22330, 22017, 21700, 21381, 21059, 20736, 20410, 20083,
  22          //                              19755 , 19425, 19095, 18765, 18435, 18104, 17774, 17445, 17117, 16790,
  23          //                              16464 , 16140, 15818, 15498, 15181, 14866, 14554, 14245, 13939, 13636,
  24          //                              13337 , 13042, 12750, 12462, 12179, 11899, 11624, 11353, 11086, 10824,
  25          //                              10566 , 10313, 10064, 9820 , 9581 , 9346,  9116,  8890,  8669,  8453,
  26          //                              8241  , 8034 , 7832 , 7634 , 7440,  7250,  7066,  6885,  6709,  6537,//80¬
             -∞ÂèÇËÄÉ
  27          //                              6369  , 6205,  6045,  5889,  5737,  5589,  5445,  5304,  5166,  5033,
  28          //                              4902,   4776,  4652,  4532,  4414,  4300,  4189,  4081,  3976,  3873,
  29          //                              3774,   3677,  3582,  3490,  3401,  3314,  3229,  3147,  3067,  2989,
  30          //                              2913,   2839,  2768,  2698,  2630,  2564,  2500,  2437,  2376,  2317,
  31          //                              2260,   2204,  2149,  2096,  2045,  1995,  1946,  1898,  1852,  1807,
  32          //                              1763,   1721,  1680,  1639,  1600,  1562,  1525,  1489,  1453,  1419}
  33          volatile uint16 Temperature_Low[3] = {14245, 13636, 12750}; //50¬∞
  34          volatile uint16 Temperature_Mid[3] = {9116, 8453, 7832};  //70
  35          volatile uint16 Temperature_High[3] = {5445, 5033, 4652}; //90
  36          
  37          uint8 xdata LED1_EN = 0, LED2_EN = 0, LED3_EN = 0, LED4_EN = 0, LED5_EN = 0, LED6_EN = 0;
  38          
  39          /** 
  40           * @brief      LEDÊéßÂà∂ÔºåÁõÆÊ†áÈÄüÂ∫¶ÂíåÁõÆÊ†áÊ∏©Â∫¶ËµãÂÄº
  41           * @date       2022-07-14
  42           */
  43          
  44          uint8 FeverONtime = 0;
  45          void LEDControl(void)
  46          {
  47   1      //    if ((mcState != mcFault))
  48   1      //    {
  49   1      //        if ((KS.KeyValuetotal & 0x80) == 0)                    //SW3 Ê≤°ÊúâÊåâ‰∏ã
  50   1      //        {
  51   1      //      User.ScrOnAngleTime  = Temperature_Off;
  52   1      //      switch (KS.KeyValuetotal & 0x0F)                   // SW1Ê°£‰ΩçËØªÂèñ
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 2   

  53   1      //      {
  54   1      //        
  55   1      //        
  56   1      //        case 0x01:
  57   1      //        
  58   1      //        LED1=LED2=LED3=0;
  59   1      //        FeverONtime=TempOff;
  60   1      //        
  61   1      //        break;
  62   1      //        
  63   1      //        case 0x02:
  64   1      //        
  65   1      //        LED1=1;
  66   1      //        LED2=LED3=0;
  67   1      //        FeverONtime=TempLow;
  68   1      //        
  69   1      //        break;
  70   1      
  71   1      //        case 0x04:
  72   1      //        
  73   1      //        LED1=LED2=1;
  74   1      //        LED3=0;
  75   1      //        FeverONtime=TempMid;
  76   1      //        
  77   1      //        break;
  78   1      
  79   1      //        case 0x08:
  80   1      //        
  81   1      //        LED1=LED2=LED3=1;
  82   1      //        FeverONtime=TempHigh;
  83   1      //        
  84   1      //        break;        
  85   1      //        
  86   1      //        
  87   1      //         default:
  88   1      //          break;
  89   1      //      }
  90   1      ////            switch (KS.KeyValuetotal & 0x70)
  91   1      ////            {
  92   1      ////                case 0x10:                          //Âà§ÂÆöËΩ¨ÈÄü          
  93   1      ////                    switch (KS.KeyValuetotal & 0x0F)          //Âà§ÂÆöÊ∏©Â∫¶
  94   1      ////                    {
  95   1      ////                        case 0x01:
  96   1      ////                                    
  97   1      ////                User.ScrOnAngleTime  = Temperature_Off;
  98   1      ////                            break;
  99   1      ////                            
 100   1      ////                        case 0x02:
 101   1      ////                           
 102   1      ////                            User.ScrOnAngleTime   = Speed_LowTemperature_LOW;
 103   1      ////                            break;
 104   1      ////                            
 105   1      ////                        case 0x04:
 106   1      ////                            
 107   1      ////                            User.ScrOnAngleTime  = Speed_LowTemperature_Mid;
 108   1      ////                            break;
 109   1      ////                            
 110   1      ////                        case 0x08:
 111   1      ////                            
 112   1      ////                            User.ScrOnAngleTime   = Speed_LowTemperature_High;
 113   1      ////                            break;
 114   1      ////                            
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 3   

 115   1      ////                        default:
 116   1      ////                            break;
 117   1      ////                    }
 118   1      ////                    
 119   1      ////          
 120   1      ////                    MCCtrl.TargetValue = Motor_Speed_Low;         // ËΩ¨ÈÄüËµãÂÄº
 121   1      ////                    break;
 122   1      ////                    
 123   1      ////                case 0x20:
 124   1      ////                    switch (KS.KeyValuetotal & 0x0F)
 125   1      ////                    {
 126   1      ////                        case 0x01:
 127   1      ////                                    
 128   1      ////                            User.ScrOnAngleTime  = Temperature_Off;
 129   1      ////                            break;
 130   1      ////                            
 131   1      ////                        case 0x02:
 132   1      ////                            
 133   1      ////                            User.ScrOnAngleTime  = Speed_MidTemperature_LOW;
 134   1      ////                            break;
 135   1      ////                            
 136   1      ////                        case 0x04:
 137   1      ////                            
 138   1      ////                            User.ScrOnAngleTime  = Speed_MidTemperature_Mid;
 139   1      ////                            break;
 140   1      ////                            
 141   1      ////                        case 0x08:
 142   1      ////                            
 143   1      ////                            User.ScrOnAngleTime  = Speed_MidTemperature_High;
 144   1      ////                            break;
 145   1      ////                            
 146   1      ////                        default:
 147   1      ////                            break;
 148   1      ////                    }
 149   1      ////                                       
 150   1      ////                    MCCtrl.TargetValue   = Motor_Speed_Mid;           // ËΩ¨ÈÄüËµãÂÄº
 151   1      ////                    break;
 152   1      ////                    
 153   1      ////                case 0x40:
 154   1      ////                    switch (KS.KeyValuetotal & 0x0F)
 155   1      ////                    {
 156   1      ////                        case 0x01:
 157   1      ////                           
 158   1      ////                            User.ScrOnAngleTime  = Temperature_Off;
 159   1      ////                            GP10 = 1;
 160   1      ////                            GP11 = 1;
 161   1      ////                            break;
 162   1      ////                            
 163   1      ////                        case 0x02:
 164   1      ////                            
 165   1      ////                            User.ScrOnAngleTime  = Speed_HIghTemperature_LOW;
 166   1      ////                            break;
 167   1      ////                            
 168   1      ////                        case 0x04:
 169   1      ////                            
 170   1      ////                            User.ScrOnAngleTime  = Speed_HIghemperature_Mid;
 171   1      ////                            break;
 172   1      ////                            
 173   1      ////                        case 0x08:
 174   1      ////                            
 175   1      ////                            User.ScrOnAngleTime  = Speed_HIghTemperature_High;   
 176   1      ////                            break;
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 4   

 177   1      ////                            
 178   1      ////                        default:
 179   1      ////                            break;
 180   1      ////                    }
 181   1      ////                   
 182   1      ////                    MCCtrl.TargetValue = Motor_Speed_HIgh;           // ËΩ¨ÈÄüËµãÂÄº
 183   1      ////                    break;
 184   1      ////                    
 185   1      ////                default:
 186   1      ////                    break;
 187   1      ////            }
 188   1      //      
 189   1      //      //Ê∏©Â∫¶ËµãÂÄºÊéßÂà∂
 190   1      //      #if(ThermostaticENABLE)
 191   1      //      {
 192   1      //        switch (KS.KeyValuetotal & 0x0F)
 193   1      //        {
 194   1      //          case 0x01:
 195   1      //            User.ScrOnAngleTime  = Temperature_Off;
 196   1      //            break;
 197   1      //            
 198   1      //          case 0x02:
 199   1      //            User.TemperatureDatum[0] = Temperature_Low[0];
 200   1      //            User.TemperatureDatum[1] = Temperature_Low[1];
 201   1      //            User.TemperatureDatum[2] = Temperature_Low[2];
 202   1      //            break;
 203   1      //            
 204   1      //          case 0x04:
 205   1      //            User.TemperatureDatum[0] = Temperature_Mid[0];
 206   1      //            User.TemperatureDatum[1] = Temperature_Mid[1];
 207   1      //            User.TemperatureDatum[2] = Temperature_Mid[2];
 208   1      //            break;
 209   1      //            
 210   1      //          case 0x08:
 211   1      //            User.TemperatureDatum[0] = Temperature_High[0];
 212   1      //            User.TemperatureDatum[1] = Temperature_High[1];
 213   1      //            User.TemperatureDatum[2] = Temperature_High[2];
 214   1      //            break;
 215   1      //            
 216   1      //          default:
 217   1      //            break;
 218   1      //        }
 219   1      //      }
 220   1      //      #endif      
 221   1      //        }
 222   1      //        else
 223   1      //        {
 224   1      //            
 225   1      //      
 226   1      //      User.ScrOnAngleTime  = Temperature_Off;
 227   1      //            switch (KS.KeyValuetotal & 0x70)
 228   1      //            {
 229   1      //                case 0x10:
 230   1      //                    
 231   1      //                    MCCtrl.TargetValue = Motor_Speed_Low;              // ËΩ¨ÈÄüËµãÂÄº
 232   1      //                    break;
 233   1      //                    
 234   1      //                case 0x20:
 235   1      //                    
 236   1      //                    MCCtrl.TargetValue = Motor_Speed_Mid;             // ËΩ¨ÈÄüËµãÂÄº
 237   1      //                    break;
 238   1      //                    
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 5   

 239   1      //                case 0x40:
 240   1      //                    
 241   1      //                    MCCtrl.TargetValue = Motor_Speed_HIgh;            // ËΩ¨ÈÄüËµãÂÄº
 242   1      //                    break;
 243   1      //                    
 244   1      //                default:
 245   1      //                    break;
 246   1      //            }
 247   1      //        }
 248   1      //    }
 249   1      //    User.ScrOnPeriod          = Temperature_Control_Period;
 250   1      //    User.ScrOnAngleTimeDatum  = User.ScrOnAngleTime;
 251   1      }
 252          
 253          
 254          /** 
 255           * @brief        ÂäüËÉΩÂáΩÊï∞ÔºåÊ∏©Â∫¶Èó≠ÁéØÊéßÂà∂
 256           * @date         2022-07-14
 257           */
 258          void Temperature_Control(void)
 259          {
 260   1      //    static uint8 Delay = 0;                   //Âª∂ËøüÊó∂Èó¥
 261   1      //    #if (ThermostaticENABLE ==1)
 262   1      //    {
 263   1      //        if (Delay > 0)                      // Âª∂ËøüËøáÈõ∂‰∏™Êï∞Ëá™Âáè
 264   1      //        {
 265   1      //            Delay--;
 266   1      //        }
 267   1      //        
 268   1      //        if ((Delay == 0) && ((mcFocCtrl.TPCtrlDealy == 0)))     // ÁîµÊú∫ËøêË°åË∂ÖËøá5sÔºå‰∏îË°•Ê≠£Âë®Êú
             -ü‰∏∫0
 269   1      //        {
 270   1      //            if (User.Temperature < User.TemperatureDatum[2])    // ÈúÄË¶ÅÁ®≥ÂÆöÁöÑNTCÈááÈõÜÂÄºÂØπÊØîÔºåË
             -ã•ÂÆûÈôÖÊ∏©Â∫¶È´ò‰∫Ü
 271   1      //            {
 272   1      //                if (User.ScrOnAngleTimeDatum > 0)               // ‰∏îÂÆûÈôÖÊúâÂºÄÂêØÊó∂Èó¥ËæìÂá∫
 273   1      //                {
 274   1      //                    User.ScrOnAngleTimeDatum --;                // Èôç‰ΩéÂèëÁÉ≠‰∏ùÂºÄÂêØÊó∂Èó¥
 275   1      //                    Delay = 15;                                 // ÊØè15‰∏™ËøáÈõ∂Âë®ÊúüÊâßË°å‰∏ÄÊ¨°
 276   1      //                }
 277   1      //            }
 278   1      //            else if (User.Temperature > User.TemperatureDatum[0])   // Ê∏©Â∫¶‰Ωé
 279   1      //            {
 280   1      //                if (User.ScrOnAngleTimeDatum < User.ScrOnPeriod)    // ÂºÄÂêØÊó∂Èó¥‰∏çË∂ÖËøáËæìÂá∫Âë®Êúü
 281   1      //                {
 282   1      //                    User.ScrOnAngleTimeDatum ++;
 283   1      //                    
 284   1      //                    if (User.ScrOnAngleTimeDatum > User.ScrOnAngleTime) // Ë°•Ê≠£ÂºÄÂêØÊó∂Èó¥>ÁªôÂÆöÂºÄÂ
             -êØÊó∂Èó¥
 285   1      //                    {
 286   1      //                        Delay = 5;                                      // 5Ê¨°ËæìÂá∫Âë®Êúü‰∏∫Ê£ÄÊµãÂë®Ê
             -úüÔºåÂçáÊ∏©Âø´
 287   1      //                    }
 288   1      //                    else                                                // Ë°•Ê≠£ÊØîÁªôÂÆö‰ΩéÔºåÂçáÊ∏©Âø
             -´
 289   1      //                    {
 290   1      //                        Delay = 1;
 291   1      //                    }
 292   1      //                }
 293   1      //            }
 294   1      //        }
 295   1      //    }
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 6   

 296   1      //    #else
 297   1      //    {
 298   1      //        if (mcFocCtrl.mcDcbusFlt >= 24500)  //ÈöèÁîµÂéãÂèòÂåñÂäüÁéá
 299   1      //        {
 300   1      //            User.ScrOnAngleTimeDatum = User.ScrOnAngleTime - 2;
 301   1      //        }
 302   1      //        else if (mcFocCtrl.mcDcbusFlt >= 23400)
 303   1      //        {
 304   1      //            User.ScrOnAngleTimeDatum = User.ScrOnAngleTime - 1;
 305   1      //        }
 306   1      //        else if (mcFocCtrl.mcDcbusFlt >= 21400)
 307   1      //        {
 308   1      //            User.ScrOnAngleTimeDatum = User.ScrOnAngleTime;
 309   1      //        }
 310   1      //        else if (mcFocCtrl.mcDcbusFlt >= 19600)
 311   1      //        {
 312   1      //            User.ScrOnAngleTimeDatum = User.ScrOnAngleTime + 1;
 313   1      //        }
 314   1      //        else
 315   1      //        {
 316   1      //            User.ScrOnAngleTimeDatum = User.ScrOnAngleTime + 2;
 317   1      //        }
 318   1      //    }
 319   1      //    #endif
 320   1      }
 321          
 322          
 323          void KEY_LED_Display(void)
 324          {
 325   1          if(mcFaultSource == FaultNoSource)                    //Âè™ÊúâÂú®ËøêË°åÁä∂ÊÄÅÊåáÁ§∫ÁÅØÂºÄÂêØ
 326   1          {
 327   2              if(Ledselfcheckflag)  // ÊµÅÊ∞¥ÁÅØÔºåÊ£ÄÊµãLED
 328   2              {
 329   3                  Ledselfcheckcnt++;
 330   3                  if(Ledselfcheckcnt > 1500)
 331   3                  {
 332   4                      Ledselfcheckflag = 0;
 333   4                      Ledselfcheckcnt  = 0;
 334   4                      LED1_EN = 0;
 335   4                      LED2_EN = 0;
 336   4                      LED3_EN = 0;
 337   4                      LED4_EN = 0;
 338   4                      LED5_EN = 0;
 339   4                      LED6_EN = 0;
 340   4                  }
 341   3                  else if(Ledselfcheckcnt > 1000)
 342   3                  {
 343   4                      LED1_EN = 1;
 344   4                      LED2_EN = 0;
 345   4                      LED3_EN = 0;
 346   4                      LED4_EN = 0;
 347   4                      LED5_EN = 0;
 348   4                      LED6_EN = 1;
 349   4                  }
 350   3                  else if(Ledselfcheckcnt > 500)
 351   3                  {
 352   4                      LED1_EN = 0;
 353   4                      LED2_EN = 1;
 354   4                      LED3_EN = 0;
 355   4                      LED4_EN = 0;
 356   4                      LED5_EN = 1;
 357   4                      LED6_EN = 0;
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 7   

 358   4                  }
 359   3                  else
 360   3                  {
 361   4                      LED1_EN = 0;
 362   4                      LED2_EN = 0;
 363   4                      LED3_EN = 1;
 364   4                      LED4_EN = 1;
 365   4                      LED5_EN = 0;
 366   4                      LED6_EN = 0;
 367   4                  }
 368   3              }
 369   2              else
 370   2              {
 371   3                  Ledselfcheckcnt = 0;
 372   3                  switch (Speed_Lv)
 373   3                  {
 374   4                      case  1 :  
 375   4                          LED1_EN = 0;
 376   4                          LED2_EN = 0;
 377   4                          LED3_EN = 1;
 378   4                      break;
 379   4              
 380   4                      case  2 :  
 381   4                          LED1_EN = 0;
 382   4                          LED2_EN = 1;
 383   4                          LED3_EN = 1;
 384   4                      break;
 385   4              
 386   4                      case  3 : 
 387   4                          LED1_EN = 1;
 388   4                          LED2_EN = 1;
 389   4                          LED3_EN = 1;
 390   4                      break;
 391   4                  }
 392   3            
 393   3                  switch (heat_Lv)
 394   3                  {
 395   4                      case  1 : 
 396   4                          LED4_EN = 1;
 397   4                          LED5_EN = 0;
 398   4                          LED6_EN = 0;
 399   4                          Ledflashcnt = 0;
 400   4                      break;
 401   4              
 402   4                      case  2 :  
 403   4                          LED4_EN = 1;
 404   4                          LED5_EN = 1;
 405   4                          LED6_EN = 0;
 406   4                          Ledflashcnt = 0;
 407   4                      break;
 408   4              
 409   4                      case  3 : 
 410   4                          LED4_EN = 1;
 411   4                          LED5_EN = 1;
 412   4                          LED6_EN = 1;
 413   4                          Ledflashcnt = 0;
 414   4                      break;
 415   4                      
 416   4                      case  4 :
 417   4                          if(++Ledflashcnt < 300)
 418   4                          {
 419   5                              LED4_EN = 0;
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 8   

 420   5                              LED5_EN = 0;
 421   5                              LED6_EN = 1;
 422   5                          }
 423   4                          else if(Ledflashcnt < 600)
 424   4                          {
 425   5                              LED4_EN = 0;
 426   5                              LED5_EN = 1;
 427   5                              LED6_EN = 0;
 428   5                          }
 429   4                          else if(Ledflashcnt < 900)
 430   4                          {
 431   5                              LED4_EN = 1;
 432   5                              LED5_EN = 0;
 433   5                              LED6_EN = 0;
 434   5                          }
 435   4                          else
 436   4                          {
 437   5                              Ledflashcnt = 0;
 438   5                          }
 439   4                      break;
 440   4                  }
 441   3            
 442   3                  if( (Cool_Lv) || (Overtmp_flag) || (OverVoltageflag) )    // ÂºÇÂ∏∏ÊàñÂÜ∑È£éÂÖ≥LED
 443   3                  {
 444   4                      LED4_EN = 0;
 445   4                      LED5_EN = 0;
 446   4                      LED6_EN = 0;
 447   4                  }
 448   3              }
 449   2          }
 450   1          else
 451   1          {
 452   2              if(mcLedDisplay.LED_Step < 600)     // Êä•ÈîôÈó™ÁÅØ‰πãÂâçÂÖàÂÖ®ÂÖ≥LED‰∏ÄÊÆµÊó∂Èó¥
 453   2              {
 454   3                  LED1_EN = 0;
 455   3                  LED2_EN = 0;
 456   3                  LED3_EN = 0;
 457   3                  LED4_EN = 0;
 458   3                  LED5_EN = 0;
 459   3                  LED6_EN = 0;
 460   3                  mcLedDisplay.LED_Step++;
 461   3                  Ledselfcheckcnt = 0;
 462   3              }
 463   2              else
 464   2              {
 465   3                  switch (mcFaultSource)
 466   3                  {
 467   4                      case FaultOverVoltage:
 468   4                      {
 469   5                          LED_ONOFF_SET(2, 0);
 470   5                      }
 471   4                      break;
 472   4                      
 473   4                      case FaultSoftOVCurrent:
 474   4                      {
 475   5                          LED_ONOFF_SET(5, 0);
 476   5                      }
 477   4                      break;
 478   4                      
 479   4                      case FaultHardOVCurrent:
 480   4                      {
 481   5                          LED_ONOFF_SET(4, 0);
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 9   

 482   5                      }
 483   4                      break;
 484   4                      
 485   4                      case FaultStall:
 486   4                      {
 487   5                          LED_ONOFF_SET(3, 0);
 488   5                      }
 489   4                      break;
 490   4                      
 491   4                      case FaultLossPhase:
 492   4                      {
 493   5                          LED_ONOFF_SET(6, 0);
 494   5                      }
 495   4                      break;
 496   4                      
 497   4                      case FaultStallenter:
 498   4                      {
 499   5                          LED_ONOFF_SET(1, 1);
 500   5                      }
 501   4                      break;
 502   4                  }
 503   3              }
 504   2          }
 505   1      
 506   1          LED_1MS_CYCLE();
 507   1      }
 508          extern uint8  PowerOKflag  ;
 509          void LED_Display(void)
 510          {
 511   1          if((PowerOKflag==0) )
 512   1          {
 513   2              GP15 = 0;
 514   2              GP16 = 0;
 515   2              GP17 = 0;
 516   2          
 517   2          }
 518   1          
 519   1          else
 520   1          {
 521   2            if(mcFaultSource == FaultNoSource)
 522   2            {
 523   3                switch (heat_Lv)
 524   3                {
 525   4                    case 1:
 526   4                    {
 527   5                        GP15 = 1;
 528   5                        GP16 = 0;
 529   5                        GP17 = 0;
 530   5        //                LED1_EN = 1;
 531   5        //                LED2_EN = 0;
 532   5        //                LED3_EN = 0;
 533   5        //                LED4_EN = 0;
 534   5        //                LED5_EN = 0;
 535   5        //                LED6_EN = 1;
 536   5                    }
 537   4                    break;
 538   4                    
 539   4                    case 2:
 540   4                    {
 541   5                        GP15 = 0;
 542   5                        GP16 = 1;
 543   5                        GP17 = 0;
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 10  

 544   5        //                LED1_EN = 0;
 545   5        //                LED2_EN = 1;
 546   5        //                LED3_EN = 0;
 547   5        //                LED4_EN = 0;
 548   5        //                LED5_EN = 1;
 549   5        //                LED6_EN = 0;
 550   5                    }
 551   4                    break;
 552   4                    
 553   4                    case 3:
 554   4                    {
 555   5                        GP15 = 0;
 556   5                        GP16 = 0;
 557   5                        GP17 = 1;
 558   5        //                LED1_EN = 0;
 559   5        //                LED2_EN = 0;
 560   5        //                LED3_EN = 1;
 561   5        //                LED4_EN = 1;
 562   5        //                LED5_EN = 0;
 563   5        //                LED6_EN = 0;
 564   5                    }
 565   4                    break;
 566   4                }
 567   3            }
 568   2            else
 569   2            {
 570   3                if(mcLedDisplay.LED_Step < 600)     // Êä•ÈîôÈó™ÁÅØ‰πãÂâçÂÖàÂÖ®ÂÖ≥LED‰∏ÄÊÆµÊó∂Èó¥
 571   3                {
 572   4                    GP15 = 0;
 573   4                    GP16 = 0;
 574   4                    GP17 = 0;
 575   4        //            LED1_EN = 0;
 576   4        //            LED2_EN = 0;
 577   4        //            LED3_EN = 0;
 578   4        //            LED4_EN = 0;
 579   4        //            LED5_EN = 0;
 580   4        //            LED6_EN = 0;
 581   4                    mcLedDisplay.LED_Step++;
 582   4                }
 583   3                else
 584   3                {
 585   4                    switch (mcFaultSource)
 586   4                    {
 587   5                        case FaultOverVoltage:
 588   5                        {
 589   6                            LED_ONOFF_SET(2, 1);
 590   6                        }
 591   5                        break;
 592   5                        
 593   5                        case FaultSoftOVCurrent:
 594   5                        {
 595   6                            LED_ONOFF_SET(5, 1);
 596   6                        }
 597   5                        break;
 598   5                        
 599   5                        case FaultHardOVCurrent:
 600   5                        {
 601   6                            LED_ONOFF_SET(4, 1);
 602   6                        }
 603   5                        break;
 604   5                        
 605   5                        case FaultStall:
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 11  

 606   5                        {
 607   6                            LED_ONOFF_SET(3, 1);
 608   6                        }
 609   5                        break;
 610   5                        
 611   5                        case FaultLossPhase:
 612   5                        {
 613   6                            LED_ONOFF_SET(6, 1);
 614   6                        }
 615   5                        break;
 616   5                        
 617   5                        case FaultStallenter:
 618   5                        {
 619   6                            LED_ONOFF_SET(1, 1);
 620   6                        }
 621   5                        break;
 622   5                    }
 623   4                }
 624   3            }
 625   2          }
 626   1      //    LED_1MS_CYCLE();
 627   1      }
 628          
 629          void LED_1MS_CYCLE(void)                 // 3‰∏™IOÂàÜÂà´ÊéßÂà∂6‰∏™LED
 630          {    
 631   1      //    if(Led_play_mode > 5)
 632   1      //    {
 633   1      //        Led_play_mode = 0;
 634   1      //    }
 635   1      //    
 636   1      //    GP15 = 0;
 637   1      //    GP16 = 0;
 638   1      //    GP17 = 0;      //LEDÂÖ®ÂÖ≥ÔºåÊ∂àÂΩ±
 639   1      //    ClrBit(P1_AN, P17 | P16 | P15);
 640   1      //    
 641   1      //    switch (Led_play_mode)
 642   1      //    {
 643   1      //        case 0:                            //ÁÇπ‰∫ÆD1
 644   1      //        {
 645   1      //            if(LED1_EN)
 646   1      //            {
 647   1      //                SetBit(P1_AN, P15);
 648   1      //                GP16 = 0;
 649   1      //                GP17 = 1;
 650   1      //            }
 651   1      //        }
 652   1      //        break;
 653   1      //        
 654   1      //        case 1:                            //ÁÇπ‰∫ÆD2
 655   1      //        {
 656   1      //            if(LED2_EN)
 657   1      //            {
 658   1      //                SetBit(P1_AN, P15);
 659   1      //                GP17 = 0;
 660   1      //                GP16 = 1;
 661   1      //            }
 662   1      //        }
 663   1      //        break;
 664   1      //        
 665   1      //        case 2:
 666   1      //        {            //ÁÇπ‰∫ÆD3
 667   1      //            if(LED3_EN)
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 12  

 668   1      //            {
 669   1      //                SetBit(P1_AN, P16);
 670   1      //                GP15 = 0;
 671   1      //                GP17 = 1;
 672   1      //            }
 673   1      //        }
 674   1      //        break;
 675   1      //              
 676   1      //        case 3:                            //ÁÇπ‰∫ÆD4
 677   1      //        {
 678   1      //            if(LED4_EN)
 679   1      //            {
 680   1      //                SetBit(P1_AN, P16);
 681   1      //                GP17 = 0;
 682   1      //                GP15 = 1;
 683   1      //            }
 684   1      //        }
 685   1      //        break;
 686   1      //              
 687   1      //        case 4:                            //ÁÇπ‰∫ÆD5
 688   1      //        {
 689   1      //            if(LED5_EN)
 690   1      //            {
 691   1      //                SetBit(P1_AN, P17);
 692   1      //                GP15 = 0;
 693   1      //                GP16 = 1;
 694   1      //            }
 695   1      //        }
 696   1      //        break;
 697   1      //              
 698   1      //        case 5:                            //ÁÇπ‰∫ÆD6
 699   1      //        {
 700   1      //            if(LED6_EN)
 701   1      //            {
 702   1      //                SetBit(P1_AN, P17);
 703   1      //                GP16 = 0;
 704   1      //                GP15 = 1;
 705   1      //            }
 706   1      //        }
 707   1      //        break;
 708   1      //    }
 709   1      //    
 710   1      //    Led_play_mode++;
 711   1      }
 712          
 713          void LED_ONOFF_SET(uint8 ShineTimes, uint8 ShineMode)
 714          {
 715   1          mcLedDisplay.WaitTime = 1250;       // Èó™ÁÅØÂë®Êúü‰πãÈó¥ÁöÑÁ≠âÂæÖÊó∂Èó¥ÔºåÂçï‰ΩçÔºöms
 716   1          
 717   1          if(mcLedDisplay.OnOffTimes < ShineTimes)
 718   1          {
 719   2              mcLedDisplay.OnOffCount++;
 720   2              if(mcLedDisplay.OnOffCount < 250)
 721   2              {
 722   3                  GP15 = 1;
 723   3                  GP16 = 1;
 724   3                  GP17 = 1;
 725   3      //            LED1_EN = 1;
 726   3      //            LED2_EN = 1;
 727   3      //            LED3_EN = 1;
 728   3                  
 729   3                  if(ShineMode == 1)
C51 COMPILER V9.60.7.0   LED                                                               08/30/2023 13:47:05 PAGE 13  

 730   3                  {
 731   4                      LED4_EN = 1;
 732   4                      LED5_EN = 1;
 733   4                      LED6_EN = 1;
 734   4                  }
 735   3              }
 736   2              else if(mcLedDisplay.OnOffCount < 500)
 737   2              {
 738   3                  GP15 = 0;
 739   3                  GP16 = 0;
 740   3                  GP17 = 0;
 741   3      //            LED1_EN = 0;
 742   3      //            LED2_EN = 0;
 743   3      //            LED3_EN = 0;
 744   3                  
 745   3                  if(ShineMode == 1)
 746   3                  {
 747   4                      LED4_EN = 0;
 748   4                      LED5_EN = 0;
 749   4                      LED6_EN = 0;
 750   4                  }
 751   3              }
 752   2              else
 753   2              {
 754   3                  mcLedDisplay.OnOffCount=0;
 755   3                  mcLedDisplay.OnOffTimes++;
 756   3              }
 757   2          }
 758   1          else
 759   1          {
 760   2              mcLedDisplay.CycleCount++;
 761   2              if(mcLedDisplay.CycleCount > mcLedDisplay.WaitTime)
 762   2              {
 763   3                  mcLedDisplay.OnOffTimes=0;
 764   3                  mcLedDisplay.CycleCount=0; 
 765   3              }
 766   2          }
 767   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    796    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     40    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
