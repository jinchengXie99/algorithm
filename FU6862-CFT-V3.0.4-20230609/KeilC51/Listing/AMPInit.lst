C51 COMPILER V9.60.7.0   AMPINIT                                                           08/30/2023 13:47:06 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE AMPINIT
OBJECT MODULE PLACED IN .\Output\AMPInit.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\User\Source\Hardware\AMPInit.c LARGE OMF2 WARNINGLEVEL(0) OPTIMIZE(9,
                    -SPEED) BROWSE INCDIR(..\User\Include;..\FU68xx_Hardware_Driver\Include) DEBUG PRINT(.\Listing\AMPInit.lst) TABS(2) OBJEC
                    -T(.\Output\AMPInit.obj)

line level    source

   1          /*  -------------------------- (C) COPYRIGHT 2022 Fortiortech ShenZhen ---------------------------*/
   2          /**
   3           * @copyright (C) COPYRIGHT 2022 Fortiortech Shenzhen
   4           * @file      xxx.c
   5           * @author    Fortiortech  Appliction Team
   6           * @since     Create:2022-07-14
   7           * @date      Last modify:2022-07-14
   8           * @note      Last modify author is Leo.li
   9           * @brief      
  10           */
  11           
  12          /* Includes -------------------------------------------------------------------------------------*/
  13          #include <FU68xx_2.h>
  14          #include <Myproject.h>
  15          
  16          /** 
  17           * @brief       AMP初始化配置,使能运放电压VHALF，配置运放的电流采样正向输入，反
             -向输入和输出，包括I_BUS,I_U,I_V
  18                          并使能对应的运放
  19           * @data        2022/08/12
  20           */ 
  21          void AMP_Init(void)
  22          {
  23   1      
  24   1          /*运放使能*/
  25   1          #if (Shunt_Resistor_Mode == Single_Resistor)
  26   1          {
  27   2              /* ----AMP 端口模拟功能设置---- */
  28   2              #if (HW_AMP_MODE == AMP_NOMAL) //外部放大
                      {
                          SetBit(P3_AN, P31);             //AMP0 Pin设置为模拟模式  +
                          SetBit(P3_AN, P30);             //AMP0 Pin设置为模拟模式  -
                          SetBit(P2_AN, P27);             //AMP0 Pin设置为模拟模式  O
                          SetBit(AMP_CR, AMP0EN);        //AMP0 Enable
                          
                          ClrBit(CMP_AMP, AMP0_GAIN2);
                          ClrBit(CMP_AMP, AMP0_GAIN1);
                          ClrBit(CMP_AMP, AMP0_GAIN0);
                      }
                      #else       // 内部PGA双端差分输入
  40   2              {
  41   3                  SetBit(P3_AN, P31);             //AMP0 Pin设置为模拟模式  +
  42   3                  SetBit(P3_AN, P30);             //AMP0 Pin设置为模拟模式  -
  43   3                  SetBit(P2_AN, P27);             //AMP0 Pin设置为模拟模式  O
  44   3                  
  45   3                  ClrBit(TSD_ADJ, AMP0M_GND);     // 禁止运放反向输入端内部接地
  46   3                  SetBit(AMP_CR, AMP0EN);         //AMP0 Enable
  47   3                  
  48   3                  #if (HW_AMPGAIN == AMP2x)
                          {
                              ClrBit(CMP_AMP, AMP0_GAIN2);
                              ClrBit(CMP_AMP, AMP0_GAIN1);
                              SetBit(CMP_AMP, AMP0_GAIN0);
C51 COMPILER V9.60.7.0   AMPINIT                                                           08/30/2023 13:47:06 PAGE 2   

                          }
                          #elif (HW_AMPGAIN == AMP4x)
  55   3                  {
  56   4                      ClrBit(CMP_AMP, AMP0_GAIN2);
  57   4                      SetBit(CMP_AMP, AMP0_GAIN1);
  58   4                      ClrBit(CMP_AMP, AMP0_GAIN0);
  59   4                  }
  60   3                  #elif (HW_AMPGAIN == AMP8x)
                          {
                              ClrBit(CMP_AMP, AMP0_GAIN2);
                              SetBit(CMP_AMP, AMP0_GAIN1);
                              SetBit(CMP_AMP, AMP0_GAIN0);
                          }
                          #elif (HW_AMPGAIN == AMP16x)
                          {
                              SetBit(CMP_AMP, AMP0_GAIN2);
                              ClrBit(CMP_AMP, AMP0_GAIN1);
                              ClrBit(CMP_AMP, AMP0_GAIN0);
                          }
                          #endif
  73   3              }
  74   2              #endif
  75   2          }
  76   1          #else   // 双 三电阻采样
                  {
                      SetBit(P1_AN, P16);             //AMP1 Pin设置为模拟模式  +
                      SetBit(P1_AN, P17);             //AMP1 Pin设置为模拟模式  -
                      SetBit(P2_AN, P20);             //AMP1 Pin设置为模拟模式  O
              
                      SetBit(P2_AN, P21);             //AMP2 Pin设置为模拟模式  +
                      SetBit(P2_AN, P22);             //AMP2 Pin设置为模拟模式  -
                      SetBit(P2_AN, P23);             //AMP2 Pin设置为模拟模式  O
                      ClrBit(P2_OE, P23);             //P23_OE需要强制为0，禁止DA1输出至PAD
              
                      SetBit(P3_AN, P31);             //AMP0 Pin设置为模拟模式  +
                      SetBit(P3_AN, P30);             //AMP0 Pin设置为模拟模式  -
                      SetBit(P2_AN, P27);             //AMP0 Pin设置为模拟模式  O
                  
                  ClrBit(TSD_ADJ, AMP0M_GND);     // 禁止运放反向输入端内部接地
                  ClrBit(TSD_ADJ, AMP12M_GND);    // 禁止运放反向输入端内部接地
                  
                      SetBit(AMP_CR, AMP0EN);         //AMP0 Enable
                      SetBit(AMP_CR, AMP1EN);         //AMP1 Enable
                      SetBit(AMP_CR, AMP2EN);         //AMP2 Enable
                      
                      #if (HW_AMP_MODE == AMP_NOMAL)      //外部放大
                      {
                          ClrBit(CMP_AMP, AMP0_GAIN2);
                          ClrBit(CMP_AMP, AMP0_GAIN1);
                          ClrBit(CMP_AMP, AMP0_GAIN0);
                  
                          ClrBit(CMP_AMP, AMP_PH_GAIN2);
                          ClrBit(CMP_AMP, AMP_PH_GAIN1);
                          ClrBit(CMP_AMP, AMP_PH_GAIN0);
                      }
                      #else
                      {
                          #if (HW_AMPGAIN == AMP2x)
                          {
                              ClrBit(CMP_AMP, AMP0_GAIN2);
                              ClrBit(CMP_AMP, AMP0_GAIN1);
                              SetBit(CMP_AMP, AMP0_GAIN0);
C51 COMPILER V9.60.7.0   AMPINIT                                                           08/30/2023 13:47:06 PAGE 3   

                  
                              ClrBit(CMP_AMP, AMP_PH_GAIN2);
                              ClrBit(CMP_AMP, AMP_PH_GAIN1);
                              SetBit(CMP_AMP, AMP_PH_GAIN0);
                          }
                          #elif (HW_AMPGAIN == AMP4x)
                          {
                              ClrBit(CMP_AMP, AMP0_GAIN2);
                              SetBit(CMP_AMP, AMP0_GAIN1);
                              ClrBit(CMP_AMP, AMP0_GAIN0);
                  
                              ClrBit(CMP_AMP, AMP_PH_GAIN2);
                              SetBit(CMP_AMP, AMP_PH_GAIN1);
                              ClrBit(CMP_AMP, AMP_PH_GAIN0);
                          }
                          #elif (HW_AMPGAIN == AMP8x)
                          {
                              ClrBit(CMP_AMP, AMP0_GAIN2);
                              SetBit(CMP_AMP, AMP0_GAIN1);
                              SetBit(CMP_AMP, AMP0_GAIN0);
                  
                              ClrBit(CMP_AMP, AMP_PH_GAIN2);
                              SetBit(CMP_AMP, AMP_PH_GAIN1);
                              SetBit(CMP_AMP, AMP_PH_GAIN0);
                          }
                          #elif (HW_AMPGAIN == AMP16x)
                          {
                              SetBit(CMP_AMP, AMP0_GAIN2);
                              ClrBit(CMP_AMP, AMP0_GAIN1);
                              ClrBit(CMP_AMP, AMP0_GAIN0);
                  
                              SetBit(CMP_AMP, AMP_PH_GAIN2);
                              ClrBit(CMP_AMP, AMP_PH_GAIN1);
                              ClrBit(CMP_AMP, AMP_PH_GAIN0);
                          }
                          #endif
                      }
                      #endif
                  }
                  #endif
 155   1        
 156   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     48    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
